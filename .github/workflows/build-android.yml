name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: '9.0'
        
    - name: Install Android SDK components
      run: |
        sdkmanager "platform-tools" "build-tools;35.0.0" "platforms;android-35" "cmdline-tools;latest"

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Install global dependencies
      run: |
        npm install -g cordova@latest
        cordova telemetry off

    - name: Remove prepare script from package.json
      run: |
        if [ -f package.json ]; then
          node -e "const pkg = require('./package.json'); delete pkg.scripts?.prepare; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));"
        fi

    - name: Install project dependencies (skip prepare)
      run: |
        if [ -f package.json ]; then
          npm install --ignore-scripts
        else
          echo "No package.json found, creating minimal one"
          echo '{}' > package.json
        fi

    - name: Initialize Cordova project structure
      run: |
        # Ensure proper Cordova project structure
        if [ ! -f config.xml ]; then
          echo "Error: config.xml not found"
          exit 1
        fi
        
        # Create necessary directories
        mkdir -p platforms
        mkdir -p plugins
        
        # Handle different project structures
        if [ -d www ] && [ -f www/index.html ]; then
          echo "✅ Standard Cordova structure found: www/index.html exists"
        elif [ -d frontend ] && [ -f frontend/index.html ]; then
          echo "📁 Converting frontend structure to Cordova www structure"
          # Copy frontend content to www directory
          cp -r frontend www
          echo "✅ Copied frontend/ to www/"
        else
          echo "❌ Error: No index.html found in www/ or frontend/"
          echo "Available directories:"
          ls -la
          exit 1
        fi
        
        # Verify www/index.html exists after setup
        if [ ! -f www/index.html ]; then
          echo "❌ Error: www/index.html still not found after setup"
          exit 1
        fi
        
        echo "✅ Cordova project structure ready"

    - name: Add Android platform
      run: |
        cordova platform add android@latest --no-telemetry
        
    - name: Install plugins
      run: |
        # Only add essential plugins to avoid conflicts
        cordova plugin add cordova-plugin-whitelist --no-telemetry

    - name: Build debug APK
      if: github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == ''
      run: |
        cordova build android --debug --no-telemetry
        echo "APK_PATH=platforms/android/app/build/outputs/apk/debug/app-debug.apk" >> $GITHUB_ENV
        echo "APK_NAME=MyKitchen-debug-$(date +%Y%m%d-%H%M).apk" >> $GITHUB_ENV

    - name: Build release APK
      if: github.event.inputs.build_type == 'release'
      run: |
        cordova build android --release --no-telemetry
        echo "APK_PATH=platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk" >> $GITHUB_ENV
        echo "APK_NAME=MyKitchen-release-$(date +%Y%m%d-%H%M).apk" >> $GITHUB_ENV

    - name: Verify APK exists
      run: |
        if [ ! -f "$APK_PATH" ]; then
          echo "APK not found at expected location: $APK_PATH"
          echo "Searching for APK files..."
          find . -name "*.apk" -type f
          exit 1
        fi
        echo "APK found: $APK_PATH"
        ls -la "$APK_PATH"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APK_NAME }}
        path: ${{ env.APK_PATH }}
        retention-days: 30

    - name: Create Release (on tag push)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.APK_PATH }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Comment APK info on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🎉 APK built successfully! Download it from the Actions artifacts.'
          })